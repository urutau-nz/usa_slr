# Add file paths for your city boundary, origin blocks, and destinations. Enter False in all fields if data already exists on the SQL database
set_up:
  # for US cities use 4269, NZ cities use 4326, otherwise use whatever the origin blocks has been projected in
  projection: 4326

# Which services do you want to evalaute? (must match 'dest_type' name from destination matix, unless script_mode='setup') TYPE: lst of str's
services:
  - supermarket
  # - food_store
  - primary_school
  - pharmacy
  - fire_station
  - emergency_medical_service

# What mode of transport are you evaluating? ['driving', 'walking', 'cycling'] TYPE: str
transport_mode: driving

# What metric would you like to evaluate? comment one out, leaving in list TYPE: str
metric:
  - distance
  # - duration

# This filters origin destination pairs based on their Euclidean proximity and then calculates the network distance between those subset pairs
query_euclidean: True

# What percent of CPU cores would you like to utilise? [0.0 - 1.0] TYPE: float
par_frac: 0.5

# What name would save the distance matrix as? TYPE: str
SQL:
  create_db: True
  database_name: usa_slr # this is the name of the database
  table_name: distances20 # this is the name for the table of distances
  port: '5002'
  host: encivmu-tml62
  replace: True


location:
    city: us
    city_code: us
    # State code (e.g. 'wa' for Washington, Seattle), this selects the SQL database, 'access_{state}' TYPE: str
    state: us
    country: us

# For logging information and downloading the latest OSM data (Check osm_region/osm_subregion for the osm.pbf download link from https://download.geofabrik.de/north-america/us.html) TYPE: str
OSM:
    osm_subregion: us
    osm_region: north-america
    # where do you want your OSM data saved
    data_directory: /home/projects/usa_slr/data/raw/osm
OSRM:
    host: http://localhost
    port: '6050'
    # Do you want the port closed after use? [True, False] TYPE: bool
    shutdown: True
